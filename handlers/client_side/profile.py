from datetime import datetime

from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.exceptions import BadRequest

from create_bot.bot import dp
from databases.client_side import RegisterUserDB, StatisticDB
from databases.payments import VIP
from handlers.client_side.register_user import start_register
from keyboard.client_keyboard.inline.profile_keyboard import profile_inline, change_user_sex_inline, \
    change_interesting_sex_inline
from states.client_states.profile_states import PhotoChangeFSM, DescriptionChangeFSM, NameChangeFSM, AgeChangeFSM, \
    SexChangeFSM, SexInterestingChangeFSM, BindingInstagramFSM
from log.log import logger


async def get_attributes_user_for_profile(register_db, user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ç—Ç—Ä–∏–±—É—Ç–æ–≤: –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ñ–æ—Ç–æ_id, instagram"""
    info = register_db.get_all_info_by_user_id(user_id=user_id)  # ((user_id, status, age...),)
    for attributes_user in info:
        age = attributes_user[3]
        city = attributes_user[6]
        name_user = attributes_user[7]
        description_user = attributes_user[8]
        photo = attributes_user[9]
        if photo is None:
            photo = attributes_user[10]
        instagram = attributes_user[11]
        return age, city, name_user, description_user, photo, instagram


# @dp.message_handler(commands='profile')
# @dp.message_handler(Text(equals=['profile', '–ø—Ä–æ—Ñ–∏–ª—å']))
async def profile_user(message: Message):
    try:
        if message.chat.type == 'private':
            register_db = RegisterUserDB()
            check_register_user = register_db.user_exists(user_id=message.from_user.id)
            if check_register_user:
                # –ó–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                age, city, name_user, description_user, photo, instagram = await get_attributes_user_for_profile(
                    register_db=register_db, user_id=message.from_user.id)
                vip_db = VIP()
                if vip_db.exists_user(user_id=message.from_user.id):
                    caption = f'{name_user}, {age}, {city} üëë\n\n'
                else:
                    caption = f'{name_user}, {age}, {city}\n\n'
                if instagram is None:
                    caption += f'{description_user}'
                else:
                    if description_user:
                        caption = f'{description_user}\n\n' \
                                  f'<b>instagram</b>: <code>{instagram}</code>'
                    else:
                        caption = f'<b>instagram</b>: <code>{instagram}</code>'
                await message.answer('–í–æ—Ç –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: ')
                try:
                    await message.answer_photo(photo=photo, caption=caption, reply_markup=profile_inline,
                                               parse_mode='html')
                except BadRequest:
                    await message.answer_video(video=photo, caption=caption, reply_markup=profile_inline,
                                               parse_mode='html')
            else:
                await start_register(message.from_user.id)
    except Exception as ex:
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ —Ä–∞–Ω–µ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                             '–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ "/profile"\n\n'
                       f'{ex}')


# @dp.callback_query_handler(Text(equals='fill_again'))
async def fill_again(callback: CallbackQuery):
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å 0"""
    if callback.message.chat.type == 'private':
        await callback.answer()
        await start_register(callback.from_user.id)


# @dp.callback_query_handler(Text(equals='change_photo'))
async def wait_change_photo(callback: CallbackQuery):
    """–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ """
    await callback.answer()
    await PhotoChangeFSM.photo_wait.set()
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')


# @dp.message_handler(state=PhotoChangeFSM.photo_wait, content_types='any')
async def process_change_photo(message: Message, state: FSMContext):
    try:
        if message.photo:
            await state.finish()
            photo_id = message.photo[-1].file_id
            register_db = RegisterUserDB()
            register_db.photo_update(user_id=message.from_user.id, photo_id=photo_id)
            logger.debug('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')

            # –ó–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            age, city, name_user, description_user, photo, instagram = await get_attributes_user_for_profile(
                register_db=register_db, user_id=message.from_user.id)
            vip_db = VIP()
            if vip_db.exists_user(user_id=message.from_user.id):
                caption = f'{name_user}, {age}, {city} üëë\n\n'
            else:
                caption = f'{name_user}, {age}, {city}\n\n'
            if instagram is None:
                caption += f'{description_user}'
            else:
                if description_user:
                    caption = f'{description_user}\n\n' \
                              f'<b>instagram</b>: <code>{instagram}</code>'
                else:
                    caption = f'<b>instagram</b>: <code>{instagram}</code>'
            await message.answer('–í–æ—Ç –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: ')
            try:
                await message.answer_photo(photo=photo, caption=caption, reply_markup=profile_inline,
                                           parse_mode='html')
            except BadRequest:
                await message.answer_video(video=photo, caption=caption, reply_markup=profile_inline,
                                           parse_mode='html')
        else:
            await message.answer('–û–∂–∏–¥–∞–ª–∞—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è')
    except Exception as ex:
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ —Ä–∞–Ω–µ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                             '–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è (–∞–Ω–∫–µ—Ç—ã) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
                       f'{ex}')


# @dp.callback_query_handler(Text(equals='change_description'))
async def wait_change_description(callback: CallbackQuery):
    """–û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è """
    await callback.answer()
    await DescriptionChangeFSM.description_wait.set()
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')


# @dp.message_handler(state=DescriptionChangeFSM.description_wait)
async def process_change_description(message: Message, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        if message.text.__len__() < 1000:
            await state.finish()
            register_db = RegisterUserDB()
            register_db.description_update(description=message.text, user_id=message.from_user.id)

            # –ó–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            age, city, name_user, description_user, photo, instagram = await get_attributes_user_for_profile(
                register_db=register_db, user_id=message.from_user.id)
            vip_db = VIP()
            if vip_db.exists_user(user_id=message.from_user.id):
                caption = f'{name_user}, {age}, {city} üëë\n\n'
            else:
                caption = f'{name_user}, {age}, {city}\n\n'
            if instagram is None:
                caption += f'{description_user}'
            else:
                if description_user:
                    caption = f'{description_user}\n\n' \
                              f'<b>instagram</b>: <code>{instagram}</code>'
                else:
                    caption = f'<b>instagram</b>: <code>{instagram}</code>'
            await message.answer('–í–æ—Ç –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: ')
            try:
                await message.answer_photo(photo=photo, caption=caption, reply_markup=profile_inline,
                                           parse_mode='html')
            except BadRequest:
                await message.answer_video(video=photo, caption=caption, reply_markup=profile_inline,
                                           parse_mode='html')
        else:
            await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤')
    except Exception as ex:
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ —Ä–∞–Ω–µ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                             '–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (–∞–Ω–∫–µ—Ç—ã) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
                       f'{ex}')


# @dp.callback_query_handler(Text(equals='change_name'))
async def wait_change_name(callback: CallbackQuery):
    """–û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è """
    await callback.answer()
    await NameChangeFSM.name_wait.set()
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–µ –∏–º—è')


@dp.message_handler(state=NameChangeFSM.name_wait)
async def process_change_name(message: Message, state: FSMContext):
    try:
        if 2 < message.text.__len__() < 45:
            await state.finish()
            register_db = RegisterUserDB()
            register_db.name_update(name=message.text, user_id=message.from_user.id)

            # –ó–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            age, city, name_user, description_user, photo, instagram = await get_attributes_user_for_profile(
                register_db=register_db, user_id=message.from_user.id)
            vip_db = VIP()
            if vip_db.exists_user(user_id=message.from_user.id):
                caption = f'{name_user}, {age}, {city} üëë\n\n'
            else:
                caption = f'{name_user}, {age}, {city}\n\n'
            if instagram is None:
                caption += f'{description_user}'
            else:
                if description_user:
                    caption = f'{description_user}\n\n' \
                              f'<b>instagram</b>: <code>{instagram}</code>'
                else:
                    caption = f'<b>instagram</b>: <code>{instagram}</code>'
            await message.answer('–í–æ—Ç –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: ')
            try:
                await message.answer_photo(photo=photo, caption=caption, reply_markup=profile_inline,
                                           parse_mode='html')
            except BadRequest:
                await message.answer_video(video=photo, caption=caption, reply_markup=profile_inline,
                                           parse_mode='html')

        elif message.text.__len__() > 45:
            await message.answer('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –±–æ–ª–µ–µ 45 —Å–∏–º–≤–æ–ª–æ–≤\n\n'
                                 '–ï—Å–ª–∏ –í–∞—à–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ 45 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é')
        else:
            await message.answer('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ 2-—É—Ö —Å–∏–º–≤–æ–ª–æ–≤')
    except Exception as ex:
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ —Ä–∞–Ω–µ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                             '–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è (–∞–Ω–∫–µ—Ç—ã) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
                       f'{ex}')


# @dp.callback_query_handler(Text(equals='change_age'))
async def wait_change_age(callback: CallbackQuery):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    await callback.answer()
    await AgeChangeFSM.age_wait.set()
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')


# @dp.message_handler(state=AgeChangeFSM.age_wait)
async def process_age_change(message: Message, state: FSMContext):
    try:
        if message.text.isdigit():
            age = int(message.text)
            if age <= 125:
                await state.finish()
                register_db = RegisterUserDB()
                register_db.age_update(age=age, user_id=message.from_user.id)

                # –ó–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                age, city, name_user, description_user, photo, instagram = await get_attributes_user_for_profile(
                    register_db=register_db, user_id=message.from_user.id)
                vip_db = VIP()
                if vip_db.exists_user(user_id=message.from_user.id):
                    caption = f'{name_user}, {age}, {city} üëë\n\n'
                else:
                    caption = f'{name_user}, {age}, {city}\n\n'
                if instagram is None:
                    caption += f'{description_user}'
                else:
                    if description_user:
                        caption = f'{description_user}\n\n' \
                                  f'<b>instagram</b>: <code>{instagram}</code>'
                    else:
                        caption = f'<b>instagram</b>: <code>{instagram}</code>'
                await message.answer('–í–æ—Ç –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: ')
                try:
                    await message.answer_photo(photo=photo, caption=caption, reply_markup=profile_inline,
                                               parse_mode='html')
                except BadRequest:
                    await message.answer_video(video=photo, caption=caption, reply_markup=profile_inline,
                                               parse_mode='html')
            else:
                if age > 125:
                    await message.answer(f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ {age} –ª–µ—Ç –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–∂–∏–≤–∞–ª!\n\n'
                                         f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ 125 –ª–µ—Ç)')
                if age < 0:
                    await message.answer(f'–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ {age}\n\n'
                                         f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞!')
        else:
            await message.answer(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∏—Å–ª–∞—Ö')
    except Exception as ex:
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ —Ä–∞–Ω–µ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                             '–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è (–∞–Ω–∫–µ—Ç—ã) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
                       f'{ex}')


# @dp.callback_query_handler(Text(equals='sex_user'))
async def wait_change_user_sex(callback: CallbackQuery):
    """–û–∂–∏–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã –ø–æ–ª–∞"""
    await callback.answer()
    await SexChangeFSM.sex_fsm.set()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤', reply_markup=change_user_sex_inline)


# @dp.message_handler(state=SexChangeFSM.sex_fsm)
async def need_click_button_sex(message: Message):
    """–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, –∞ –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞)"""
    await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–ª–∞')


# @dp.callback_query_handler(Text(equals=['male_profile', 'female_profile']), state=SexChangeFSM.sex_fsm)
async def process_change_user_sex(callback: CallbackQuery, state: FSMContext):
    try:
        sex = '—è –ø–∞—Ä–µ–Ω—å'
        if callback.data == 'female_profile':
            sex = '—è –¥–µ–≤—É—à–∫–∞'

        register_db = RegisterUserDB()
        register_db.sex_update(sex=sex, user_id=callback.from_user.id)

        await callback.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É')

    except Exception as ex:
        await callback.message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ —Ä–∞–Ω–µ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                                      '–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è (–∞–Ω–∫–µ—Ç—ã) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
                       f'{ex}')
    finally:
        await state.finish()


# @dp.callback_query_handler(Text(equals='sex_interesting'))
async def wait_change_sex_interesting(callback: CallbackQuery):
    """–û–∂–∏–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã –ø–æ–ª–∞"""
    await callback.answer()
    await SexInterestingChangeFSM.sex_interesting_fsm.set()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤',
                                  reply_markup=change_interesting_sex_inline)


# @dp.message_handler(state=SexInterestingChangeFSM.sex_interesting_fsm)
async def need_click_button_interesting_sex(message: Message):
    """–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, –∞ –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞)"""
    await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –í–∞—Å –ø–æ–ª–∞')


# @dp.callback_query_handler(Text(equals=['female_interesting_profile',
# 'male_interesting_profile', 'never_mind_profile']))
async def process_change_sex_interesting(callback: CallbackQuery, state: FSMContext):
    try:
        sex = '–≤—Å–µ —Ä–∞–≤–Ω–æ'
        if sex == 'female_interesting_profile':
            sex = '–¥–µ–≤—É—à–∫–∏'
        elif sex == 'male_interesting_profile':
            sex = '–ø–∞—Ä–Ω–∏'

        register_db = RegisterUserDB()
        register_db.interesting_sex_update(interesting_sex=sex, user_id=callback.from_user.id)
        logger.debug('–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')

        await callback.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É')

    except Exception as ex:
        await callback.message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ —Ä–∞–Ω–µ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                                      '–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –ø–æ–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è (–∞–Ω–∫–µ—Ç—ã) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
                       f'{ex}')
    finally:
        await state.finish()


# @dp.callback_query_handler(Text(equals='binding_instagram'))
async def wait_binding_instagram(callback: CallbackQuery):
    await callback.answer()
    await BindingInstagramFSM.binding_instagram_wait.set()
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –∏–Ω—Å—Ç–∞–≥—Ä–∞–º. –ü—Ä–∏–º–µ—Ä—ã: \n\n'
                                  '<code>@unknown</code>\n'
                                  '<code>https://www.instagram.com/unknown</code>', parse_mode='html')


# @dp.message_handler(state=BindingInstagramFSM.binding_instagram_wait)
async def process_binding_instagram(message: Message, state: FSMContext):
    if message.text.startswith('@') or 'https://www.instagram.com/' in message.text:
        await state.finish()
        register_db = RegisterUserDB()
        instagram = message.text
        if 'https://www.instagram.com/' in message.text:
            instagram = '<code>@' + message.text[len('https://www.instagram.com/'):] + '</code>'

        register_db.update_instagram(login_instagram=instagram, user_id=message.from_user.id)

        await message.answer('–ò–Ω—Å—Ç–∞–≥—Ä–∞–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')

        # –ó–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        age, city, name_user, description_user, photo, instagram = await get_attributes_user_for_profile(
            register_db=register_db, user_id=message.from_user.id)
        vip_db = VIP()
        if vip_db.exists_user(user_id=message.from_user.id):
            caption = f'{name_user}, {age}, {city} üëë\n\n'
        else:
            caption = f'{name_user}, {age}, {city}\n\n'
        if instagram is None:
            caption += f'{description_user}'
        else:
            if description_user:
                caption = f'{description_user}\n\n' \
                          f'<b>instagram</b>: <code>{instagram}</code>'
            else:
                caption = f'<b>instagram</b>: <code>{instagram}</code>'
        await message.answer('–í–æ—Ç –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: ')
        try:
            await message.answer_photo(photo=photo, caption=caption, reply_markup=profile_inline,
                                       parse_mode='html')
        except BadRequest:
            await message.answer_video(video=photo, caption=caption, reply_markup=profile_inline,
                                       parse_mode='html')
        await message.answer('–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è instagram –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π "/delete_instagram"')
    else:
        await message.answer('–¢–∞–∫–æ–π –≤–∏–¥ —Å—Å—ã–ª–∫–∏/–ª–æ–≥–∏–Ω–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –ü—Ä–∏–º–µ—Ä—ã: \n\n'
                             '<code>@unknown</code>\n'
                             '<code>https://www.instagram.com/unknown</code>', parse_mode='html')


# @dp.message_handler(commands='delete_instagram')
async def delete_instagram(message: Message):
    if message.chat.type == 'private':
        register_db = RegisterUserDB()
        check_register_user = register_db.user_exists(user_id=message.from_user.id)
        if check_register_user:
            register_db.delete_instagram(message.from_user.id)
            await message.answer('–ò–Ω—Å—Ç–∞–≥—Ä–∞–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
        else:
            await start_register(message.from_user.id)


# @dp.callback_query_handler(Text(equals='statistic'))
async def get_statistic_user(callback: CallbackQuery):
    await callback.answer()
    statistic_db = StatisticDB()
    user_info = statistic_db.get_all_info(user_id=callback.from_user.id)  # ((info1, info2), )
    if user_info:
        attribute_info = user_info[0]

        my_scores = attribute_info[1]
        their_scores = attribute_info[2]
        residence_time = attribute_info[3]
        amount_my_complain = attribute_info[4]
        amount_their_complain = attribute_info[5]

        residence_time = datetime.utcfromtimestamp(residence_time).strftime('%Y-%m-%d %H:%M:%S')

        await callback.message.answer(text=f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìà\n\n'
                                           f'üòç–í–∞—à–∏ –æ—Ç–º–µ—Ç–∫–∏: <b>{my_scores} —á–µ–ª–æ–≤–µ–∫</b>\n'
                                           f'ü•∞–í–∞c –æ—Ü–µ–Ω–∏–ª–∏: <b>{their_scores} —á–µ–ª–æ–≤–µ–∫</b>\n\n'
                                           f'üîê–í—ã –ø–æ–∂–∞–ª–æ–≤–∞–ª–∏—Å—å: <b>–Ω–∞ {amount_my_complain} —á–µ–ª–æ–≤–µ–∫(-–∞)</b>\n'
                                           f'ü´•–ù–∞ –í–∞—Å –ø–æ–∂–∞–ª–æ–≤–∞–ª–∏—Å—å: <b>–Ω–∞ {amount_their_complain} —á–µ–ª–æ–≤–µ–∫(-–∞)</b> \n\n'
                                           f'üìÜ–í—ã –≤ –±–æ—Ç–µ —Å <b>{residence_time}</b>', parse_mode='html')


def register_handler_profile():
    dp.register_message_handler(profile_user, commands='profile')
    dp.register_message_handler(profile_user, Text(equals=['profile', '–ø—Ä–æ—Ñ–∏–ª—å', '–ü—Ä–æ—Ñ–∏–ª—åüìÑ']))
    dp.register_callback_query_handler(fill_again, Text(equals='fill_again'))
    dp.register_callback_query_handler(wait_change_photo, Text(equals='change_photo'), state=None)
    dp.register_message_handler(process_change_photo, state=PhotoChangeFSM.photo_wait, content_types='any')
    dp.register_callback_query_handler(wait_change_description, Text(equals='change_description'))
    dp.register_message_handler(process_change_description, state=DescriptionChangeFSM.description_wait)
    dp.register_callback_query_handler(wait_change_name, Text(equals='change_name'))
    dp.register_message_handler(process_change_name, state=NameChangeFSM.name_wait)
    dp.register_callback_query_handler(wait_change_age, Text(equals='change_age'))
    dp.register_message_handler(process_age_change, state=AgeChangeFSM.age_wait)
    dp.register_callback_query_handler(wait_change_user_sex, Text(equals='sex_user'))
    dp.register_message_handler(need_click_button_sex, state=SexChangeFSM.sex_fsm)
    dp.register_callback_query_handler(process_change_user_sex, Text(equals=['male_profile', 'female_profile']),
                                       state=SexChangeFSM.sex_fsm)
    dp.register_callback_query_handler(wait_change_sex_interesting, Text(equals='sex_interesting'))
    dp.register_message_handler(need_click_button_interesting_sex, state=SexInterestingChangeFSM.sex_interesting_fsm)
    dp.register_callback_query_handler(process_change_sex_interesting,
                                       Text(equals=['female_interesting_profile', 'male_interesting_profile',
                                                    'never_mind_profile']),
                                       state=SexInterestingChangeFSM.sex_interesting_fsm)
    dp.register_callback_query_handler(wait_binding_instagram, Text(equals='binding_instagram'))
    dp.register_message_handler(process_binding_instagram, state=BindingInstagramFSM.binding_instagram_wait)
    dp.register_message_handler(delete_instagram, commands='delete_instagram')
    dp.register_callback_query_handler(get_statistic_user, Text(equals='statistic'))
