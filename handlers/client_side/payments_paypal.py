import paypalrestsdk

from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery

from create_bot.bot import dp
from databases.client_side import RegisterUserDB
from databases.payments import PayPalDB, VIP
from handlers.client_side.register_user import start_register
from keyboard.client_keyboard.inline.payments_paypal_keyboard import create_buy_vip_paypal_keyboard,\
    create_payment_vip_paypal_keyboard


async def create_payments(name, article, price, description):
    paypalrestsdk.configure({
        "mode": "sandbox",  # sandbox or live
        "client_id": "ARwutuygW1Fr9terIqi2MK9u2oBZ9orauA8KxvAuhSbvKj2NnDF3HD6ZrakR45fBHlDug87lYaSsgQwY",
        "client_secret": "EMt1HBWZqbVteeYnPz-SExUsLC3xUu2s76Y_IwGgK8vQiehcmEJHGCcF9iR2_MaVZdS_ejYmHfKwYLkV"})

    payment = paypalrestsdk.Payment({
        "intent": "sale",
        "payer": {
            "payment_method": "paypal"},
        "redirect_urls": {
            "return_url": "http://localhost:3000/payment/execute",
            "cancel_url": "http://localhost:3000/"},
        "transactions": [{
            "item_list": {
                "items": [{
                    "name": f"{name}",
                    "sku": f"{article}",
                    "price": f"{price}.00",
                    "currency": "RUB",
                    "quantity": 1}]},
            "amount": {
                "total": f"{price}.00",
                "currency": "RUB"},
            "description": f"{description}"}]})

    if payment.create():
        print("Payment created successfully")
        payment_id = payment.id
        for link in payment.links:
            if link.rel == "approval_url":
                approval_url = str(link.href)
                return approval_url, payment_id
    else:
        return False, False


async def check_payment(payment_id: str):
    payment = paypalrestsdk.Payment.find(f'{payment_id}').to_dict()
    payer = payment.get('payer')
    if payer is not None:
        if payer.get('status') == 'VERIFIED':
            return payer
    return False


# @dp.message_handler(commands='vip')
async def create_payment(message: Message):
    if message.chat.type == 'private':
        register_db = RegisterUserDB()
        check_register_user = register_db.user_exists(user_id=message.from_user.id)
        if check_register_user:
            await message.answer('üî• –ü–æ–ª—É—á–µ–Ω–∏–µ <b>VIP!</b> üî•\n\n'
                                 'üì©–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∏–∞–ª–æ–≥—É —Å —á–µ–ª–æ–≤–µ–∫–æ–º? –í–æ—Ç –æ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å! –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ VIP '
                                 '–∏ —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ '
                                 '–Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–æ—Å—Ç—É–ø –ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, –∞ <b>—Ü–µ–ª—ã–π –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç</b>!\n\n'
                                 'üìπ–•–æ—Ç–∏—Ç–µ –≤—Å—Ç–∞–≤–ª—è—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –Ω–æ –∏ <b>–≤–∏–¥–µ–æ</b>? –°–æ —Å—Ç–∞—Ç—É—Å–æ–º VIP'
                                 ' –í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–∂–µ —Ç–∞–∫—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å\n\n'
                                 'üëë–ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å VIP <b>–ø–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä–æ–Ω—É</b> –≤ –ø—Ä–æ—Ñ–∏–ª—å\n\n'
                                 'üî•–ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏ <b>–≤—ã–¥–µ–ª–∏—Å—å</b>, –ø—Ä–∏–æ–±—Ä–µ—Ç—è —Å—Ç–∞—Ç—É—Å VIP!',
                                 reply_markup=create_buy_vip_paypal_keyboard(33, 97, 200, 900), parse_mode='html')
        else:
            await start_register(message.from_user.id)


# @dp.callback_query_handler(Text(startswith='vip_paypal_'))
async def create_payments_one_day(callback: CallbackQuery):
    try:
        await callback.answer()
        type_vip = callback.data[len('vip_paypal_'):]
        text_payment = ''
        url = ''
        payments_id = 0
        time_vip = 0

        if type_vip == 'one_day':
            time_vip += 86400
            text_payment += '–ü–æ–∫—É–ø–∫–∞ üëëVIPüëë –Ω–∞ 1 –¥–µ–Ω—å'
            url, payments_id = await create_payments(name='–ü–æ–∫—É–ø–∫–∞ VIP –Ω–∞ 1 –¥–µ–Ω—å', article='Buy VIP', price=33,
                                                     description='–ü–æ–∫—É–ø–∫–∞ VIP –Ω–∞ 1 –¥–µ–Ω—å')
        elif type_vip == 'three_day':
            time_vip += 259200
            text_payment += '–ü–æ–∫—É–ø–∫–∞ üëëVIPüëë –Ω–∞ 3 –¥–Ω—è'
            url, payments_id = await create_payments(name='–ü–æ–∫—É–ø–∫–∞ VIP –Ω–∞ 3 –¥–Ω—è', article='Buy VIP', price=97,
                                                     description='–ü–æ–∫—É–ø–∫–∞ VIP –Ω–∞ 3 –¥–Ω—è')

        elif type_vip == 'week_day':
            time_vip += 604800
            text_payment += '–ü–æ–∫—É–ø–∫–∞ üëëVIPüëë –Ω–∞ –Ω–µ–¥–µ–ª—é'
            url, payments_id = await create_payments(name='–ü–æ–∫—É–ø–∫–∞ VIP –Ω–∞ –Ω–µ–¥–µ–ª—é', article='Buy VIP', price=200,
                                                     description='–ü–æ–∫—É–ø–∫–∞ VIP –Ω–∞ –Ω–µ–¥–µ–ª—é')

        elif type_vip == 'month_day':
            time_vip += 2592000
            text_payment += '–ü–æ–∫—É–ø–∫–∞ üëëVIPüëë –Ω–∞ –º–µ—Å—è—Ü!'
            url, payments_id = await create_payments(name='–ü–æ–∫—É–ø–∫–∞ VIP –Ω–∞ –º–µ—Å—è—Ü', article='Buy VIP', price=900,
                                                     description='–ü–æ–∫—É–ø–∫–∞ VIP –Ω–∞ –º–µ—Å—è—Ü')

        if url and payments_id:
            await callback.message.answer(text_payment,
                                          reply_markup=create_payment_vip_paypal_keyboard(url=url,
                                                                                          payment_id=payments_id,
                                                                                          days=time_vip))

    except Exception as ex:
        await callback.message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        print(ex)


# @dp.callback_query_handler(Text(startswith=check_payment_ !{payment_id}_{days}))
async def check_payment_handler(callback: CallbackQuery):
    try:
        await callback.answer()
        data = callback.data.split('_')
        payment_id = data[2]
        time_vip = int(data[3])
        if await check_payment(payment_id=payment_id):
            paypal_db = PayPalDB()
            if not paypal_db.payment_exists(payments_id=payment_id):
                paypal_db.payment_add(user_id=callback.from_user.id, payments_id=payment_id)
                vip_db = VIP()
                vip_db.update_status_vip(user_id=callback.from_user.id, status_vip=True, time_vip=time_vip)
                await callback.message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ VIP!\n\n'
                                              '–¢–µ–ø–µ—Ä—å –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞\n\n'
                                              '<b>–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞</b>: "/statistic_vip"\n\n'
                                              'üí´–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏üí´', parse_mode='html')
            else:
                await callback.message.answer('–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø–ª–∞—Ç–µ–∂–∏ VIP!'
                                              ' –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')
        else:
            await callback.message.answer('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω')
    except Exception as ex:
        await callback.message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ VIP, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º '
                                      '–≤–æ–∑–Ω–∏–∫–∞–µ—Ç –¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!')
        print(ex)


def register_handlers_payments_paypal():
    dp.register_message_handler(create_payment, commands='vip')
    dp.register_message_handler(create_payment, Text(equals='VIPüëë'))
    dp.register_callback_query_handler(create_payments_one_day, Text(startswith='vip_paypal_'))
    dp.register_callback_query_handler(check_payment_handler, Text(startswith='check_payment_'))
