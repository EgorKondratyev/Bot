import time

from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from geopy.geocoders import Nominatim
from fake_useragent import UserAgent

from create_bot.bot import bot, dp
from databases.client_side import RegisterUserDB, ScoresDB, StatisticDB
from databases.payments import VIP
from keyboard.client_keyboard.default.register_keyboard import sex_menu, sex_interesting_menu, location_menu,\
    skip_description_menu
from keyboard.client_keyboard.default.main_keyboard import main_menu
from states.client_states.register_states import RegisterFSM
from log.log import logger


async def start_register(user_id: int):
    await bot.send_message(user_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –±–æ—Ç–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤!\n\n'
                                    '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!')
    await bot.send_message(user_id, '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
    await RegisterFSM.age.set()


# @dp.message_handler(state=RegisterFSM.age)
async def get_age(message: Message, state: FSMContext):
    try:
        if message.text.isdigit():
            age = int(message.text)
            if age <= 125:

                async with state.proxy() as data:
                    data['age'] = age
                logger.debug('–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

                await RegisterFSM.user_sex.set()
                await message.answer('–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º', reply_markup=sex_menu)
            else:
                if age > 125:
                    await message.answer(f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ {age} –ª–µ—Ç –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–∂–∏–≤–∞–ª!\n\n'
                                         f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ 125 –ª–µ—Ç)')
                if age < 0:
                    await message.answer(f'–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ {age}\n\n'
                                         f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞!')
        else:
            await message.answer(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∏—Å–ª–∞—Ö')
    except Exception as ex:
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ —á–µ–ª–æ–≤–µ–∫—É –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                       f'{ex}')
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                             '–ü—Ä–∏–Ω–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º >3')
        await state.finish()


# @dp.message_handler(state=RegisterFSM.user_sex)
async def get_user_sex(message: Message, state: FSMContext):
    try:
        if message.text.lower() == '—è –¥–µ–≤—É—à–∫–∞' or message.text.lower() == '—è –¥–µ–≤—É—à–∫–∞üëß':
            async with state.proxy() as data:

                data['user_sex'] = '—è –¥–µ–≤—É—à–∫–∞'
            logger.debug('–ü–æ–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

            await RegisterFSM.interesting_sex.set()
            await message.answer('–ö—Ç–æ –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?', reply_markup=sex_interesting_menu)

        elif message.text.lower() == '—è –ø–∞—Ä–µ–Ω—å' or message.text.lower() == '—è –ø–∞—Ä–µ–Ω—åüë®':
            async with state.proxy() as data:

                data['user_sex'] = '—è –ø–∞—Ä–µ–Ω—å'
            logger.debug('–ü–æ–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

            await RegisterFSM.interesting_sex.set()
            await message.answer('–ö—Ç–æ –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?', reply_markup=sex_interesting_menu)

        else:
            await message.answer('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø–æ–ª–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö '
                                 '–∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–Ø –¥–µ–≤—É—à–∫–∞"/"–Ø –ø–∞—Ä–µ–Ω—å"')
    except Exception as ex:
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                       f'{ex}')
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                             '–ü—Ä–∏–Ω–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º >3\n\n'
                             '–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π "/start"')
        await state.finish()


# @dp.message_handler(state=RegisterFSM.interesting_sex)
async def get_interesting_sex(message: Message, state: FSMContext):
    try:
        # –î–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ –∫–æ–¥–∞ –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤ 3 —Ä–∞–∑–∞, –æ–¥–Ω–∞–∫–æ –¥–ª—è –±–æ–ª—å—à–µ–π —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º –ª—É—á—à–µ
        # —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
        if message.text.lower() == '–ø–∞—Ä–Ω–∏' or message.text.lower() == '–ø–∞—Ä–Ω–∏üë®':

            async with state.proxy() as data:
                data['interesting_sex'] = '–ø–∞—Ä–Ω–∏'
            logger.debug('–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

            await RegisterFSM.city.set()
            await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ –í—ã –≥–æ—Ä–æ–¥–∞?', reply_markup=location_menu)

        elif message.text.lower() == '–¥–µ–≤—É—à–∫–∏' or message.text.lower() == '–¥–µ–≤—É—à–∫–∏üëß':
            async with state.proxy() as data:
                data['interesting_sex'] = '–¥–µ–≤—É—à–∫–∏'
            logger.debug('–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

            await RegisterFSM.city.set()
            await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ –í—ã –≥–æ—Ä–æ–¥–∞?', reply_markup=location_menu)

        elif message.text.lower() == '–≤—Å–µ —Ä–∞–≤–Ω–æ':
            async with state.proxy() as data:
                data['interesting_sex'] = message.text.lower()
            logger.debug('–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø–æ–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

            await RegisterFSM.city.set()
            await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ –í—ã –≥–æ—Ä–æ–¥–∞?', reply_markup=location_menu)
        else:
            await message.answer('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–µ–º, –∫—Ç–æ –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '
                                 '–∏–ª–∏ –∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–ü–∞—Ä–Ω–∏"/"–î–µ–≤—É—à–∫–∏"/"–í—Å–µ —Ä–∞–≤–Ω–æ"')
    except Exception as ex:
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                       f'{ex}')
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                             '–ü—Ä–∏–Ω–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º >3\n\n'
                             '–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π "/start"')
        await state.finish()


# @dp.message_handler(state=RegisterFSM.city)
async def get_city(message: Message, state: FSMContext):
    user_agent = UserAgent().opera
    geolocator = Nominatim(user_agent=user_agent)
    try:
        if message.location:
            latitude = message.location.latitude
            longitude = message.location.longitude
            location = geolocator.geocode(f'{latitude}, {longitude}')
            if location is not None:

                async with state.proxy() as data:
                    data['location'] = str(location).split(',')[0]
                logger.debug('–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

                await RegisterFSM.name_user.set()
                await message.answer('–ö–∞–∫ –º–Ω–µ –í–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å?', reply_markup=ReplyKeyboardRemove())
            else:
                await message.answer('–ü–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –í–∞—à –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º\n\n'
                                     '–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –í–∞—à –≥–æ—Ä–æ–¥ –∏–ª–∏ –∂–µ –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑')
        else:
            location = geolocator.geocode(f'{message.text}')
            if location is not None:

                async with state.proxy() as data:
                    data['location'] = str(location).split(',')[0]
                logger.debug('–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

                await RegisterFSM.name_user.set()
                await message.answer('–ö–∞–∫ –º–Ω–µ –í–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å?', reply_markup=ReplyKeyboardRemove())
            else:
                await message.answer(f'–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ {message.text}\n\n'
                                     f'–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥–æ—Ä–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω –±–µ–∑ –æ—à–∏–±–æ–∫')
    except Exception as ex:
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                       f'{ex}')
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                             '–ü—Ä–∏–Ω–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º >3\n\n'
                             '–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π "/start"')
        await state.finish()


# @dp.message_handler(state=RegisterFSM.name_user)
async def get_name_user(message: Message, state: FSMContext):
    try:
        if 2 < message.text.__len__() < 45:

            async with state.proxy() as data:
                data['name'] = message.text
            logger.debug('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

            await RegisterFSM.description_user.set()
            await message.answer('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ', reply_markup=skip_description_menu)
        elif message.text.__len__() > 45:
            await message.answer('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –±–æ–ª–µ–µ 45 —Å–∏–º–≤–æ–ª–æ–≤\n\n'
                                 '–ï—Å–ª–∏ –í–∞—à–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ 45 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é')
        else:
            await message.answer('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ 2-—É—Ö —Å–∏–º–≤–æ–ª–æ–≤')
    except Exception as ex:
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                       f'{ex}')
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                             '–ü—Ä–∏–Ω–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º >3\n\n'
                             '–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π "/start"')
        await state.finish()


# @dp.message_handler(state=RegisterFSM.description_user)
async def get_description_user(message: Message, state: FSMContext):
    try:
        if message.text.__len__() < 1000:
            async with state.proxy() as data:
                if message.text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                    data['description'] = message.text
                else:
                    data['description'] = ''
            logger.debug('–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
            await RegisterFSM.photo.set()
            await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥\n'
                                 '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ', reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤')
    except Exception as ex:
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                       f'{ex}')
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                             '–ü—Ä–∏–Ω–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º >3\n\n'
                             '–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π "/start"')
        await state.finish()


# @dp.message_handler(state=RegisterFSM.photo, content_types='any')
async def finish_register(message: Message, state: FSMContext):
    try:
        if message.photo:
            register_db = RegisterUserDB()

            photo_id = message.photo[-1].file_id
            async with state.proxy() as data:
                age = data['age']
                user_sex = data['user_sex']
                interesting_sex = data['interesting_sex']
                location = data['location']
                name_user = data['name']
                description_user = data['description']

            if not register_db.user_exists(message.from_user.id):
                score_db = ScoresDB()
                statistic_db = StatisticDB()
                score_db.user_add(user_id=message.from_user.id)
                statistic_db.user_add(user_id=message.from_user.id, residence_time=int(time.time()))

                register_db.user_add(user_id=message.from_user.id, age=age, user_sex=user_sex,
                                     interesting_sex=interesting_sex, city=location, name_user=name_user,
                                     description_user=description_user, photo=photo_id)
                register_db.add_evaluated(user_id=message.from_user.id, evaluated_id=message.from_user.id)
                await message.answer('–ù–∞—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n'
                                     '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞')
                await message.answer('–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: ')
                caption = f'{name_user}, {age}, {location}\n\n' \
                          f'{description_user}'
                await message.answer_photo(photo=photo_id, caption=caption, reply_markup=main_menu)
            else:
                register_db.user_update(user_id=message.from_user.id, age=age, user_sex=user_sex,
                                        interesting_sex=interesting_sex, city=location, name_user=name_user,
                                        description_user=description_user, photo=photo_id)
                await message.answer('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                await message.answer('–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: ')
                caption = f'{name_user}, {age}, {location}\n\n' \
                          f'{description_user}'
                await message.answer_photo(photo=photo_id, caption=caption, reply_markup=main_menu)

            await state.finish()

        if message.video:
            vip_db = VIP()
            if vip_db.exists_user(user_id=message.from_user.id):
                register_db = RegisterUserDB()

                video_id = message.video.file_id
                async with state.proxy() as data:
                    age = data['age']
                    user_sex = data['user_sex']
                    interesting_sex = data['interesting_sex']
                    location = data['location']
                    name_user = data['name']
                    description_user = data['description']

                if not register_db.user_exists(message.from_user.id):
                    score_db = ScoresDB()
                    statistic_db = StatisticDB()
                    score_db.user_add(user_id=message.from_user.id)
                    statistic_db.user_add(user_id=message.from_user.id, residence_time=int(time.time()))

                    register_db.user_add(user_id=message.from_user.id, age=age, user_sex=user_sex,
                                         interesting_sex=interesting_sex, city=location, name_user=name_user,
                                         description_user=description_user, video=video_id)
                    register_db.add_evaluated(user_id=message.from_user.id, evaluated_id=message.from_user.id)
                    await message.answer('–ù–∞—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n'
                                         '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞')
                    await message.answer('–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: ')
                    caption = f'{name_user}, {age}, {location}\n\n' \
                              f'{description_user}'
                    await message.answer_video(video=video_id, caption=caption, reply_markup=main_menu)
                else:
                    register_db.user_update(user_id=message.from_user.id, age=age, user_sex=user_sex,
                                            interesting_sex=interesting_sex, city=location, name_user=name_user,
                                            description_user=description_user, video=video_id)
                    await message.answer('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                    await message.answer('–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: ')
                    caption = f'{name_user}, {age}, {location}\n\n' \
                              f'{description_user}'
                    await message.answer_video(video=video_id, caption=caption, reply_markup=main_menu)

                await state.finish()
            else:
                await message.answer('–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VIP —Å—Ç–∞—Ç—É—Å!\n\n'
                                     '"/vip" - –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VIP —Å—Ç–∞—Ç—É—Å')
        else:
            await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ')
    except Exception as ex:
        logger.warning(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                       f'{ex}')
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n'
                             '–ü—Ä–∏–Ω–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º >3\n\n'
                             '–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π "/start"')
        await state.finish()


def registration_of_registration_handlers():
    # Nice name func >3
    dp.register_message_handler(get_age, state=RegisterFSM.age)
    dp.register_message_handler(get_user_sex, state=RegisterFSM.user_sex)
    dp.register_message_handler(get_interesting_sex, state=RegisterFSM.interesting_sex)
    dp.register_message_handler(get_city, state=RegisterFSM.city, content_types='any')
    dp.register_message_handler(get_name_user, state=RegisterFSM.name_user)
    dp.register_message_handler(get_description_user, state=RegisterFSM.description_user)
    dp.register_message_handler(finish_register, state=RegisterFSM.photo, content_types='any')
