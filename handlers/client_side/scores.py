# –ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –∫–æ–º–∞–Ω–¥—ã "–º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª–∏" –∏ "–º–æ–∏ –æ—Ü–µ–Ω–∫–∏"

from aiogram.dispatcher.filters import Text
from aiogram.types import Message

from create_bot.bot import dp
from handlers.client_side.profile import get_attributes_user_for_profile
from keyboard.client_keyboard.inline.dating_keyboard import update_scores
from databases.client_side import ScoresDB, RegisterUserDB
from databases.admin_side import BanUsersDB
from utilits.check_sub_channel import check_sub_channel
from utilits.translate_text import translate_from_lang_russian
from keyboard.admin_keyboard.inline.sub_channel import create_sub_channel_keyboard


# @dp.message_handler(Text(startswith=['–º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª–∏']))
async def i_was_evaluated(message: Message):
    if message.chat.type == 'private':
        if await check_sub_channel(message.from_user.id):
            register_db = RegisterUserDB()
            check_register_user = register_db.user_exists(user_id=message.from_user.id)
            ban_db = BanUsersDB()
            if not ban_db.exists_user(user_id=message.from_user.id):
                if check_register_user:
                    scores_db = ScoresDB()
                    their_scores = scores_db.get_their_scores(user_id=message.from_user.id)
                    print(their_scores)
                    if their_scores:
                        not_rated = 0
                        for user_id in their_scores:
                            evaluated_id = user_id[0]
                            if evaluated_id is not None:  # –ï—Å–ª–∏ –º—ã –æ—Ü–µ–Ω–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –æ–Ω –Ω–∞—Å –Ω–µ—Ç, —Ç–æ –±—É–¥–µ—Ç None
                                smile = scores_db.get_smile(user_id=message.from_user.id, evaluated_id=evaluated_id)
                                age, city, name_user, description_user, photo, instagram = await \
                                    get_attributes_user_for_profile(register_db=register_db, user_id=evaluated_id)
                                if instagram is None:
                                    caption = f'{name_user}, {age}, {city}\n\n' \
                                              f'{description_user}'
                                else:
                                    if description_user:
                                        caption = f'{name_user}, {age}, {city}\n\n' \
                                                  f'{description_user}\n\n' \
                                                  f'<b>instagram</b>: <code>{instagram}</code>'
                                    else:
                                        caption = f'{name_user}, {age}, {city}\n\n' \
                                                  f'<b>instagram</b>: <code>{instagram}</code>'
                                await message.answer_photo(photo=photo, caption=caption, parse_mode='html',
                                                           reply_markup=update_scores(score=smile,
                                                                                      evaluated_id=evaluated_id))
                                not_rated += 1
                            else:
                                pass
                        if not_rated == 0:
                            text_translate = await translate_from_lang_russian(user_id=message.from_user.id,
                                                                               text='–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª\n\n'
                                                                                    '–°–∞–º–æ–µ –≤—Ä–µ–º—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π '
                                                                                    '"/search" –∏ –Ω–∞–±—Ä–∞—Ç—å —Å–≤–æ—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å!')
                            await message.answer(text_translate)
                    else:
                        text_translate = await translate_from_lang_russian(user_id=message.from_user.id,
                                                                           text='–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª\n\n'
                                                                                '–°–∞–º–æ–µ –≤—Ä–µ–º—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π '
                                                                                '"/search" –∏ –Ω–∞–±—Ä–∞—Ç—å —Å–≤–æ—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å!')
                        await message.answer(text_translate)
        else:
            text_channel_sub = await translate_from_lang_russian(user_id=message.from_user.id,
                                                                 text='–ü—Ä–µ–∂–¥–µ —á–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º'
                                                                      ' —Å—Ç–æ–∏—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã!')
            await message.answer(text_channel_sub, reply_markup=create_sub_channel_keyboard())


# @dp.message_handler(Text(startswith='–º–æ–∏ –æ—Ç–º–µ—Ç–∫–∏'))
async def my_score(message: Message):
    if message.chat.type == 'private':
        if await check_sub_channel(message.from_user.id):
            register_db = RegisterUserDB()
            check_register_user = register_db.user_exists(user_id=message.from_user.id)
            ban_db = BanUsersDB()
            if not ban_db.exists_user(user_id=message.from_user.id):
                if check_register_user:
                    scores_db = ScoresDB()
                    my_scores = scores_db.get_my_score(user_id=message.from_user.id)
                    if my_scores:
                        not_rated = 0
                        for user_id in my_scores:
                            evaluated_id = user_id[0]
                            if evaluated_id is not None:  # –ï—Å–ª–∏ –º—ã –æ—Ü–µ–Ω–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –æ–Ω –Ω–∞—Å –Ω–µ—Ç, —Ç–æ –±—É–¥–µ—Ç None
                                smile = scores_db.get_smile(user_id=message.from_user.id, evaluated_id=evaluated_id)
                                age, city, name_user, description_user, photo, instagram = await \
                                    get_attributes_user_for_profile(register_db=register_db, user_id=evaluated_id)
                                if instagram is None:
                                    caption = f'{name_user}, {age}, {city}\n\n' \
                                              f'{description_user}'
                                else:
                                    if description_user:
                                        caption = f'{name_user}, {age}, {city}\n\n' \
                                                  f'{description_user}\n\n' \
                                                  f'<b>instagram</b>: <code>{instagram}</code>'
                                    else:
                                        caption = f'{name_user}, {age}, {city}\n\n' \
                                                  f'<b>instagram</b>: <code>{instagram}</code>'
                                await message.answer_photo(photo=photo, caption=caption, parse_mode='html',
                                                           reply_markup=update_scores(score=smile,
                                                                                      evaluated_id=evaluated_id))
                                not_rated += 1
                            else:
                                pass
                        if not_rated == 0:
                            text = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª\n\n' \
                                   '–°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞–±—Ä–∞—Ç—å —Å–≤–æ—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π '
                            text_translate = await translate_from_lang_russian(user_id=message.from_user.id,
                                                                               text=text)
                            await message.answer(text_translate + '"/search"')
                        else:
                            text_translate = await translate_from_lang_russian(user_id=message.from_user.id,
                                                                               text='–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 20'
                                                                                    ' –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                            await message.answer(text_translate)
                    else:
                        text = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª\n\n' \
                               '–°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞–±—Ä–∞—Ç—å —Å–≤–æ—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π '
                        text_translate = await translate_from_lang_russian(user_id=message.from_user.id,
                                                                           text=text)
                        await message.answer(text_translate + "/search")
        else:
            text_channel_sub = await translate_from_lang_russian(user_id=message.from_user.id,
                                                                 text='–ü—Ä–µ–∂–¥–µ —á–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º'
                                                                      ' —Å—Ç–æ–∏—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã!')
            await message.answer(text_channel_sub, reply_markup=create_sub_channel_keyboard())


def register_handler_scores():
    dp.register_message_handler(i_was_evaluated, Text(startswith='ü•∞'))
    dp.register_message_handler(my_score, Text(startswith='üòç'))
